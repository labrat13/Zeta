++ Список Улучшений Проекта
* Добавлять сюда желаемые фичи для реализации в будущих релизах.
* Пока первый релиз не готов, в нем реализовывать только самое неодбходимое! Остальное записывать сюда, потом распределить по релизам.
    
    
+++Единицы измерения результативности для Задач и Проектов
 * сейчас используется шкала процентов: 0..100% достижения результата.
 * предлагается использовать шкалу в соответствии с системой единиц СИ: 
    * 1 результат = 1000 миллирезультатов = 1 000 000 микрорезультатов = 1 000 000 000 нанорезультатов.

+++Показывать автоматически диалог с прогрессбаром при загрузке Хранилища
* тут была идея реализовать ожидание при запуске движка как форму с непрерывно бегущим прогрессбаром.
  * он будет включаться вызовом в коде, крутиться фоновым потоком, выключаться также вызовом кода в конце загрузки.
  * перввй раз он будет показываться и замерять длительность от своего открытия до закрытия.
    Если это время менее 3 секунд, в настройки надо записать флаг, что показывать прогресс-бар не нужно.
    Так замеряется при каждом запуске, поэтому когда БД маленькая, все быстро и прогресс бара нет, 
     а когда БД большая, прогрессбар автоматически показывается при следующем запуске.
* пока можно пометить места в коде, где подключать и отключать этот прогрессбар планируется.     

+++Показывать каталог Материалов в дереве Задач приложения
* предлагается показывать содержимое каталога материалов в дереве Задач приложения, как для обычной файловой системы, с иконками согласно типам файлов.
    * и что с ними делать? 
        * Удалять через контекстное меню ноды?
        * Открывать через контекстное меню ноды или двойным кликом?
        * ссылки на этот файл искать в БД по всем элементам?
    * получится наглядно, подобно органайзеру, все в одном приложении.
    * файлы накопятся быстро, как материалы для переработки в задачах.
    * Удалять файлы будет рискованно - хз где они используются, из дерева же не видно. Их тогда бы завести в систему как элементы-файлы и цеплять к задачам как под-элементы? Но и это не поможет найти места где они используются. Поэтому эта папка материалов будет расти до 100 гб.
* Идея хорошая, но обновлять дерево будет долго - и так там много элементов надо загрузить будет. Хотя если только необходимые корневые и раскрытые элементы загружать, то будет быстро. 
* Проблема в файловом хранилище - непонятно, какие материалы как используются:
    * Некоторые используются в составе комплекта: ссылка на папку подразумевает ссылку на все файлы и подпапки в папке, но явных ссылок на них нет.
    * Удаление задачи: можно бы и файлы удалить, а они еще где-либо используются. Как это определить?
    * Все, что не удаление: а если файлы потребуются вместе с выполненной задачей для чего-либо позже?
    * вот получается, эта куча файлов будет расти до предела. А потом - проще завести новое Хранилище Задач, а старое распотрошить и удалить.
        * Значит, в приложении надо установить предельный размер папки материалов Хранилища Задач, и проверять, что оно достигнуто, выводить сообщение об этом.
        * Когда выводить сообщение? при открытии Хранилища? Надо решить это.    

+++Тегами распределять задачи по видам деятельности, вручную или автоматически
 * Надо тегами размечать задачи по видам деятельности: Копать, покупать, пилить, изобретать, искать, итп.
 * Раньше предполагался Класс Задачи, его можно было из текста задачи определить автоматически, вот по глаголу.
 * Да и теги мест тоже можно автоматически назначать: нужны словоформы слов для каждого тега. Например, если в тексте задачи есть любая словоформа слова Дача, то и тег места Дача можно автоматически предложить для этой задачи.
    * Тогда объект Тег должен иметь свойство Словоформы, в него надо записать все словоформы или паттерны регекса для поиска таких слов в описании или названии задачи.   

+++Быстрый ввод задач
 * Задачи бывают разных классов по их необходимым свойствам, но для всех обычно предлагается одна универсальная форма с кучей контролов. Пользователь в этой куче контролов теряется, пытаясь для каждого контрола определить, нужен ли он в данном случае и что в него нужно записать, в каком виде.
    * Поэтому пользователь в начале работы с планировщиком быстро устает. 
 * А надо показывать пользователю только необходимые контролы! 
 * Остальные поля прятать на отдельную вкладку - полную карту всех свойств Задачи.
 * Поскольку классов задачи может быть несколько, надо иметь возможность первым шагом выбрать правильный класс Задачи, либо позже быстро изменить этот класс Задачи.
    * Например, если была выбрана простая тодо-задача, а потом окажется, что надо указать дату начала или окончания Задачи.
 * Хотя пользователь быстро привыкает к стабильному интерфейсу, и потом работает с ним менее трудоемко, но:
    1. Все равно надо держать пользовательский интерфейс минималистичным.
    2. Я плохо привыкаю, медленно, поскольку разнообразия у меня много.
    3. Все равно, нужна философия, платформа, плюсы и минусы этого способа мышления, итп. Нужна концепция планирования и исполнения задач, значит, нужно писать книгу-инструкцию об этом образе жизни. Одним только файлом справки приложения тут не обойтись. 

+++Просмотр прошлых и будущих задач окном регулируемой ширины
 * В планировщике нет напоминаний о задачах. Я должен сам заглядывать в него каждый день.
 * Даже если реализовать напоминания, они не сработают, когда компьютер выключен. 
    * То есть, никогда не сработают, компьютер всегда выключен.
 * Из-за того, что я не каждый день буду заглядывать в этот планировщик, я буду пропускать задачи, назначенные на некоторые дни.
 * Чтобы не пропускать задачи по этой причине, нужно показывать будущие задачи так же, как и прошлые.
 * Предлагается скользящее окно размером в 3..7 дней в каждую сторону, где в хронологическом порядке сверху списка задач Сегодня размещаются прошлые невыполненные задачи, а снизу - будущие задачи. Окно-список задач должно быть прокручено вниз, граница между сегодня и завтра должна быть ровно посередине окна списка задач, и она должна быть отмечена как-либо, чтобы пользователь всегда видел завтрашние задачи и эту границу между прошлыми и будущими задачами. Тогда он не упустит из виду завтрашние задачи, не забудет запустить планировщик для работы по ним. 
 * Размер окна должен регулироваться автоматически или назначаться пользователем, от 1 до 7 дней в будущее.
    * Вручную - через настройки приложения планировщика.
    * Автоматически - как среднестатистическое значение интервалов в сутках между запусками планировщиа пользователем. Например, если планировщик запускается каждый день - ширина окна 1 день. Если раз в неделю - ширина окна 7 дней.
        * Нужно разработать механизм такого статистического подсчета.
        * Нужно хранить в настройках планировщика дату последнего запуска, текущую ширину окна, еще что-то.
        * Это все не поможет, если я буду как всегда, как попало пользоваться: то густо, то пусто. В таком случае лучше сразу установить ширину окна максимальную.  

+++Импорт-Экспорт задач в файлы списков Задач
 * Добавить фичу импорт-экспорт задач в XML файлы-коллекции Задач. Подобно LittleTasks.
 * Будет ли это полезно для хранения TODO-списков? 
 * Потребуется взять класс коллекции Задач из проекта LittleTasks ?
 * Потребуется добавить в класс Задачи код чтения-записи XML данных.
 * Синхронизация задач со смартфона либо другого компьютера, передаваемых в виде XML-файла списка Задач.
    * На смартфоне эти задачи будут изменены, дополнены  и созданы новые, все это надо получить в виде файла и синхронизировать с основной БД планера, ориентируясь по дате модификации элемента.
    * Значит, элемент должен иметь свойство Дата последней модификации, для поддержки синхронизации версий. Либо свойство Версия, но это не гарантирует правильную обработку данных. 

+++Статистика Хранилища Задач - реализована в 1.0.0.0
 * реализована в версии 1.0.0.0 приложения
 * Получать статистику по текущему Хранилищу Задач, подобно УАМХ.
 * Отдельным свойством Движка или как объект внутри приложения?
 * Код можно взять из проекта Хранилищ, но его придется переработать.
 * Категории для статистики:
    * общее число задач?
    * число выполненных задач?
    * число остановленных задач?
    * число ожидающих задач?
    * todo: какие еще категории содержимого для этого Хранилища есть?

+++ Внедрить УАМХ для этого проекта
 * сейчас УАМХ не готов для применения. Необходимо сначала его доработать, обновить. Предыдущая попытка применить УАМХ для нового проекта привела к тому, что проект усложнился и остановился из-за противоречий между концепцией задач и УАМХ.
 * решить, можно ли использовать УАМХ. И если да, то как:
    а) копировать код из нее по частям, отдельными решениями.
    б) как библиотеку целиком? 
    - А ее нет целиком - надо собирать, доделывать и подключать к проекту.
    - прошлая попытка использовать УАМХ привела к тому, что проект стал слишком сложным и остановился.
    - Решение: отложить решение о внедрении УАМХ на последующие версии проекта. На третий релиз?
      Сейчас важно быстро сделать себе этот проект как инструмент. 
      Поэтому сейчас выбрать вариант а) таскать из УАМХ необходимые куски технологии.
    - так если УАМХ внедрять, то надо было все по УАМХ делать! А я Настройки из Оператора позаимствовал, а не из УАМХ.
      - там они лучше, чем в УАМХ. Но вот это все теперь надо свести в один набор, а я не могу. Там работы много, а мне некогда!.
      
+++Добавить шаблоны для свойства элемента Замечания
 Шаблоны, подобно википаду, позволят быстро создавать начальную структуру текста для новой Задачи либо Категории.
 Сейчас в проекте предусмотрена подгрузка из настроек приложения начального текста при создании элемента.
 Но такой текст не всегда подходящий к ситуации.
 Предлагается в КаталогХранилищаЗадач завести папку Шаблоны, в нее пользователь может добавить текстовые файлы, ссодержимое которых будет использоваться в качестве подобных шаблонов. Пользователь создает эти файлы самостоятельно, с помощью текстового редактора, добавляет их в эту папку Шаблоны, и затем, в Карточке Элемента н может выбрать один из этих файлов шаблонов. После выбора, текст свойства элемента Замечания будет заменено на текст из выбранного файла шаблона. 
 * файл шаблона должен начинаться с "Шаблон".
 * вероятно, файлы шаблонов должны будут содержать также название типа элемента, чтобы различать шаблоны для разных типов элементов.  
    * Но пока это не продумано.
 * сейчас форма карточки элемента не содержит никаких способов для такого выбора шаблона.
    * Добавить в крнтекстное меню контрола новый пункт, который вызывает форму выбора файла шаблона, и далее по сценарию.
    * Добавить на форму кнопку, которая вызывает форму выбора файла шаблона, и далее по сценарию.
    * Добавить на форму меню, которое содержит основные действия, является точкой расширения функциональности в будущем, 
      И в том числе, содержит пункт меню, раскрывающийся в список шаблонов, в котором можно выбрать файл шаблона и добавить его содержимое в контрол Замечания в Карточке Элемента. Не только при создании элемента, но и в любой момент.
 Замечания:
  * что это даст? 
    * Позволит единообразно оформлять содержание Задач?
    * Облегчит выполнение задачи, если ждля нее будет правильно выбран шаблон-методика для решения подобных задач?
        * Такие методики сначала надо разработать, затем дополнять и совершенствовать. Если этим систематически заниматься, то польза от этих шаблонов будет. Отдельные, управляемые пользователем файлы позволяют эту систему развивать постепенно, подобно тому, как я развивал шаблоны в википаде. Только все время то лень, то неохота.
        * Шаблон должен задавать структуру, начальный план в описании элемента. Для часто повторяющихся Задач шаблоны могут содержать план выполнения и полезные замечания: там нет; это работает, но недостаточно хорошо; это очевидно, но не работает; это пробовал, но недоделал, итп. Но для такого полезного применения шаблон надо составлять специально, систематически этим заниматься. А на это времени у меня нет сейчас. 

