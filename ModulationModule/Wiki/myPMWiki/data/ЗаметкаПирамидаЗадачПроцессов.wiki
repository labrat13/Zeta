++ Заметка Пирамида Задач Процессов

Общее описание идеи.

++ Идея Пирамида Задач

Представление о задачах для их частичной автоматизации.
На ее основе можно построить автоматический планировщик задач, чтобы и текущие задачи исполнять, и цели достигать, и нагрузку балансировать, и за показателями следить, не допуская перекосов в общем плане.

+++Причины создания проекта
Надо балансировать работы.
У меня всех этих работ так много, что я все их не успеваю никак!
Надо их записывать, выбирать для исполнения, балансировать по НаправлениеРазвития.
Чтобы развиваться равномерно или хотя бы подготавливать для определенных проектов все попутные работы.
- для этого надо сразу классифицировать работы по НаправлениеРазвития, еще при их создании.
- надо определять, какое НаправлениеРазвития насколько проработано и по какому - надо больше работать.
  Тут обычным списком задач не отделаешься.

+++Разработать теорию
Все это целая теория, которую нужно разработать для моего собственного использования. 
Чтобы затем разработать для нее инструментарий для моделирования, планирования, проектирования и отслеживания всей этой модели процессов, задач, проектов. 
Такая модель позволит планировать достижение целей, контроль за состоянием целей и добиться более устойчивого и целенаправленного развития.
Хотя модель, конечно, будет неполной, и не гарантирует успех.
- TODO: надо проработать эту тему для лучшего моделирования моей ситуации и оптимизации выбора точек для автоматизации процессов.
- это может быть использовано для МенеджерПроектов.
- вопрос: модель нужно поддерживать в актуальном состоянии - вносить в нее изменения для соответствия с реальными условиями. Как это будет осуществляться? 
- TODO: придумать название для этой теории, чтобы ссылаться на нее в прочих текстах.
- TODO: создать документ по этой теории и внести в общественную коллекцию документов по планированию.

++Пирамида задач
1. Первой линией задач являются текущие задачи. Они имеют наибольшую пользу. Они сильно зависят от контекста, текущего состояния рабочей среды.

2. Второй линией являются проекты. Проекты являются контейнерами для Задач.

3. Третьей линией являются цели проектов.

 - вопрос: а вот тут я не уверен. Тут какая-то подмена понятий получается. Все последующие линии - это цели. а первые две линии - задачи и проекты, то есть, действия по реализации целей. Наверно, подмена понятий именно в восприятии Задачи (и Проекта также) как действия по достижению Цели, а не как Цели низкого уровня. А если не путать эти две Сущности, - то получается чистая пирамида Целей, от общих к частным. И тогда должна быть построена соответствующая этой пирамиде Целей пирамида Действий, но у нее нет названий для Действий выше второго уровня. Задачи есть, Проекты есть, а далее - пробел в языке?
  * TODO: найти правильные названия для Действий 3-5 уровней модели.
 - а вся эта пирамида - собрана мною из того, что было. Поэтому она состоит из чего попало: Задачи, Проекты, Цели, Стратегические Цели, Потребности, Задача существования. 
   Никакой строгой классификации тут нет, и смысла в ней нет, мне кажется - все эти чистые модели Сущностей, как правило, совсем не вписываются в реальный мир и только мешают создавать полезные модели. 
   TODO: Хотя для облегчения реализации в программе следует таки проработать эту свалку и разделить все эти штуки отдельно, каждую со своими свойствами.
 - На третьей линии это будут цели проектов, для достижения которых создавались проекты. 
  Такие общие цели, вроде развития моих умений или пополнения ресурсов. 
  И вот нужно их определить для проектов и добавить в таблицу объектов третьей линии.
 - Предлагается все проекты и мини-проекты и отдельные задаче-проекты графически представить как группы, объединенные общей целью.

4. Четвертой линией являются стратегические цели.
 - я пока не знаю что сказать - потом там видно будет, наверное.

5. Пятой линией является задача существования и порожденные ею потребности.
  Потребности эти реализуются в виде задач.
 - я пока не знаю что сказать - потом там видно будет, наверное.
 * TODO: обдумать эту часть позже.
 * TODO: представить пирамиду задач как пирамиду процессов, поскольку практическая польза этой модели именно в представлении процессов.

++Пирамида абстракций
Кроме этого, для всех сущностей можно составить абстракции, иерархию/пирамиду абстракций.
В реальном мире вообще нет задач - все задачи представлены в сознании человека как абстракции.    
Текущие задачи (первой линии) реального мира, представлены абстракциями задач первой линии.
Будем считать их классами, а их реальное наполнение и привязку к окружающей среде - объектами классов.
И над этими классами можно создать иерархию абстракций. Или даже несколько иерархий - тут от любой точки в каждом направлении можно накопать много классов абстракций, было бы для чего полезного копать.

* TODO: обдумать эту тему и собрать цельное представление.

Над задачами первой линии могут быть поставлены абстракции задач.
И для этих абстрактных задач могут быть подобраны инструменты для их выполнения.
Наибольшую пользу приносят инструменты для абстракций задач первого уровня. Они применяются очень часто и очень мелко, они очень простые. Создать их - это много мелкой работы. (Желательно создать шаблон для создания инструментов, чтобы ускорить их создание и иметь единообразные: среду и навыки применения инструментов.) Отдача от инструментов зависит от возможности реализации.

На втором уровне - проекты и создание инструментов для них, для частичной автоматизации процессов решения задач. Это более сложные инструменты. От этих инструментов, теоретически, больше отдачи, но проекты реже выполняются. 
Главное их свойство - они редко повторяются, намного реже, чем текущие задачи.
Практически каждый проект - уникальный и приходится его:
- либо разбивать на отдельные повторяющиеся части, технологические процессы, и уже их пытаться автоматизировать,
- либо весь процесс исполнения проекта заранее собирать из этих модулей, настраивать на ходу или на этапе планирования проекта. (У проекта есть отдельные этапы, как и у задачи. Поскольку исполнение задачи - это Процесс, то у него есть части - этапы.) Весь процесс тогда можно разбить на модули-процессы и затем связывать их, представляя процесс исполнения проекта в виде модели или скрипта.
Эта модель должна работать в рамках этого проекта, но фактически она является уникальной для проекта,
из-за множества зависимостей от текущей ситуации, ресурсов и прочего.

Далее у нас есть цели и есть стратегические цели.
Цель это абстракция над проектом, стало быть, абстракция над задачами.
Стратегические цели это абстракция над группой целей, группировка целей.
* TODO: уточнить, тут явно что-то упущено.

++Пирамида процессов
+++Общее представление процессов
Значит, проекты/задачи это процессы. 
Проекты у меня могут быть остановленные и долго в таком состоянии пребывать. 
Процессы в модели - тоже могут быть остановлены и долго пребывать в таком состоянии.
Следовательно, это не процесс как объект ОС, а процесс как абстракция, как набор данных. Поэтому они могут быть приостановлены в ожидании некоторого ресурса или еще по какой-либо причине. И они могут ждать, пока этот ресурс не появится.
 - значит, для хранения приостановленных процессов нужна память. Для хранения контекста процесса - всяких объектов - нужна память. Для хранения приостановленного процесса, работающего с файлами по 1ГБ, нужно пространство на диске, чтобы вместить эти файлы и хранить их, пока процесс остановлен.
   - это рассматривалось уже в МенеджерПроектов. Да, требуется много места для всех этих приостановленных проектов.
   - тут главная проблема - сложность представления самого этого процесса, так, чтобы продолжить его выполнение. Это рассматривалось уже в МенеджерПроектов и еще где-то.    
Появление некоторого ресурса это событие. Оно выставляется для всей системы и запускает просмотр всех приостановленных процессов, чтобы выявить процессы, ожидающие именно этого ресурса. Не могут ли такие процессы быть уже готовы к выполнению, поскольку этот ресурс, и его свойства - это именно то, чего им не хватало для продолжение работы.
 - Это рассматривалось уже в МенеджерПроектов и еще где-то. 

Таким образом, я получаю модель процессов, которые представляют собой абстракцию реального процесса выполнения задач. 
Когда вся эта модель будет спроектирована и готова, в нее можно будет заносить все задачи и проекты для того, чтобы в дальнейшем они могли постепенно исполняться.
 - в нее нужно заносить Цели, чтобы планировать их достижение.
 - в нее нужно заносить Методы, чтобы балансировать всю систему.
 - в нее нужно заносить текущие задачи, чтобы от системы была практическая польза.

+++Пирамида процессов
Предполагаю, что пирамида задач - это пирамида процессов. В которой главный процесс управляет задачами самого верхнего уровня (пятой линии в моей модели). 
А процессы более нижних слоев - это процессы, создаваемые для выполнения конкретной задачи. 
Либо это процессы-серверы, которые в бесконечном цикле выполняют работу по достижению и поддержанию некоторого уровня-показателя, выбирая, планируя и исполняя задачи, делегируя их исполнение процессам более низкого уровня иерархии.
Получается такая интересная архитектура. 
С одной стороны, модель простая и логичная. 
С другой стороны, эти процессы-серверы - исполняющие входящие задачи либо задачи по собственному выбору - интересный орешек в этой концепции. 
У человека их много, и как они создаются, почему они создаются, как управляются - это вот вопрос.

Вот 5 уровень я себе представляю.
4 уровень  - кое-как представляю в общих чертах.
А что дальше - я не понимаю совершенно сейчас!

1. Процесс 5 уровня - один процесс. Он отправляет сообщения процессам 4 уровня о необходимости изменения некоторого показателя на Х пунктов вверх или вниз.
  вопрос: каким именно процессам? Какие это процессы 4 уровня должны быть?
2. Процессы 4 уровня читают свою очередь сообщений и исполняет команды из нее.
 * вопрос: как регулировать уровень показателя, когда процесс не успевает вовремя отработать сообщения и их накопилась уже очередь?
   - это нечто подобное оконным сообщениям виндовс - там тоже есть такие ситуации и реализованы оптимизации по ним.
 * вопрос: как именно процесс 4 уровня должен исполнять поступающие команды?    
 * вопрос: как реализовать процесс 4 уровня в компьютерном коде? 
    Процесс 5 уровня - там все просто: продетектил изменения показателей, создал сообщения, распихал в очереди сообщений - все, можно спать.
    Процессы 4 уровня - Они должны выполняться параллельно? Они должны взаимодействовать друг с другом? Неизвестно пока.
    Между слоями сейчас все передается сообщениями? Раз это модель процессов, то тогда надо все данные передавать между ними сообщениями.
 * TODO: Следует продумать, что тут неправильно. Это, вообще-то, модель абстрактных процессов, а я пытаюсь представить ее реальными потоками процессора.

+++5 уровень пирамиды процессов
Пятый уровень может быть реализован как нейросеть, которая получает входные данные в виде Показателей.
И на выходе этой нейросети актуаторы - то есть, вызов процедур более низкого уровня, которым сообщается, что они должны повысить либо понизить тот или иной показатель. 
Это должна быть нейросеть потому, что все это регулирование довольно сложно.
 Но на первое время можно представить эту логику кучей if-then-else.
Эта нейросеть должна реагировать на изменения показателей, но пока неизвестно, на каждое изменение или на превышающее некий установленный порог, чтобы реже перезапускать вычисления нейросети.
Возможно, есть еще какое-то динамическое поведение с зависимостью от времени, но я пока не знаю.

Итак, задача процесса пятого уровня - сформировать задание для процессов четвертого уровня для достижения требуемого состояния. 
Можно представить состояние системы как совокупность показателей. 

+++4 уровень пирамиды процессов
Для процессов четвертого уровня задача состоит в том, чтобы из имеющихся у них методов изменения ситуации выбрать такой, который оптимально выполнит эту поставленную задачу. 
 Приведение показателя либо группы показателей в требуемое состояние. 
 Система не дискретная, а количественная, поэтому применение метода должно варьироваться по силе действия, поэтому методу передается параметр силы как разность между имеющимся значением показателя и требуемым значением показателя.
Вопрос в том, что эти методы еще надо где-то брать, они обычно собираются из того, что есть у системы, как записи происходящих событий и реакций на них. 
Поэтому довольно трудно насобирать эти методы во время работы системы.

Еще, при необходимости постоянно мониторить какой-либо параметр, процесс четвертого уровня может создать процесс-сервер (см выше), который будет что-то там циклически караулить и соответственно что-то делать. 
Останавливается этот процесс-сервер также процессом четвертого уровня. Поскольку он, процесс-сервер, является частью более сложного процесса достижения цели.

+++Заметки
В модель процессов надо внести учет времени, поскольку если все время уходит на входящие-текущие задачи 1 уровня, то его не хватает на задачи и обслуживание слоев 2..5 модели.
- Но планирование задач с 5 по 2 уровни - лучше, чем тупо пилить задачи 1 уровня.
  - и оно должно иметь целью уменьшение потока входящих задач 1 уровня, но при этом не терять уровни показателей ниже минимального предела.
    Для этого нужен интеллект, знания, опыт.
- Чтобы получать знания и опыт, нужно проводить исследования и эксперименты. Для них нужны ресурсы: время, место, интеллектуальные ресурсы, материальные ресурсы, итп.
  В совокупности они образуют бюджет этого эксперимента. Проекта?
  - тогда до начала эксперимента должна быть определена и Цель как решение задачи?
  - и все прочее нужно делать как для Проектов? Было бы неплохо.
- Задачи и процессы 2..5 уровней можно оценивать по подчиненным им задачам.
  Присвоить задачам 1 уровня баллы по важности и сложности, и потом оценивать задачи прочих уровней по этим суммам баллов?
  И по количеству этих задач тоже следует.
  - а зачем оценивать?
    - чтобы выбирать и балансировать задачи для исполнения по трудоемкости, по влиянию на показатели, по важности?
  - а кто будет оценивать и как?
    - трудоемкость: сначала - пользователь, потом - на основе предыдущих попыток.
    - важность: пользователь или сама модель на основе баланса показателей.


++Вопросы
1. Как я предполагаю создать такую модель задач?
- Это получается такая модель, которая должна будет в итоге увязывать вместе все мои задачи и процессы, включая текущие задачи, входящие задачи, имеющиеся проекты. 
  Как задачи, сгенерированные этой системой задач (внутренние задачи), так и задачи, поступающие снаружи (внешние задачи).
- Я пока не знаю, как это можно реализовать.
- Есть идея накидать в первую линию задач все имеющиеся у меня на данный момент задачи, кроме задач из проектов: Все текущие задачи, все записанные задачи, итп - все в одну линию, одну таблицу БД.
- Потом во вторую линию добавить имеющиеся проекты. Как объекты второй линии модели задач, наверное?
 * прежде чем заводить таблицу объектов для такой модели, надо определить свойства этих объектов.
   Значит, сначала надо создать тестовую модель этой пирамиды задач-процессов, и копить для нее фактические материалы. Но все равно, сразу не получится хорошо, этот процесс итеративный.
- а для первого прототипа я предполагаю создать процесс пятой линии и несколько Показателей, и опробовать работу генератора задач. 
   Он только будет создавать задачи с текстами вроде "Задача: Увеличить значение Показателя <Наименование показателя> на А <Единица измерения> до Б <Единица измерения>. Текущее значение показателя: В <Единица измерения>.
   Эти задачи будут добавляться в общую очередь задач, и пользователь будет либо сам их исполнять, либо должен будет написать скрипт, который делает как-либо эту работу.    

2. Зачем мне создавать такую модель задач?
- Цель построения такой модели - более лучшее распределение приоритетов для задач. В том числе, для выбора очередности исполнения текущих задач. И для балансировки работ по проектам. 
- Мой собственный механизм оценки и классификации задач что-то дает сбои в последнее время.
  Вот эта модель может позволить автоматизировать оценку задач, лучше балансировать их для соответствия текущим моим условиям и поставленным целям.
  - а может и не получиться - на модель эту будет уходить больше времени, чем на сами задачи.
  - тогда следует эту модель создавать как дополнение к планировщику - МенеджерПроектов.
    Там и все задачи будут храниться на месте, и эта модель кстати придется.  

3. Как определять текущие значения для Показателей?
- Автоматически подсчитать можно только то, что заведено на компьютер. Остальное придется вручную подсчитывать и вносить регулярно в программу.
  - но методы подсчета не должны меняться за весь период работы с программой.
- Очевидно, следует переносить на компьютер как можно больше исходных данных для показателей, чтобы меньше работать самому.






