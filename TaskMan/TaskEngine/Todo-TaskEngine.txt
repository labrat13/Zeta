Файл рабочих задач для проекта TaskEngine - Движок менеджера задач.

Цели проекта:
- быстро изготовить простой инструмент: средство для записи задач по видам деятельности и проектам, в виде дерева.

Этапы проекта: (примерные, порядок может измениться)
+ создание проекта
- описание концепции и процессов приложения, предметной области приложения, глоссария.
- разработка основных компонентов движка как Сущностей предметной области
- разработка системы хранения данных (БД)
- разработка менеджера файлов
- разработка подсистемы настроек приложения
- разработка и реализация графического интерфейса пользователя
- интеграция частей проекта.
- разработка инсталлятора
- изготовление документации пользователя
- очистка кода и изготовление документации разработчика проекта.
- сборка первого релиза и инсталлятора.
- тестирование первого релиза.


02 декабря 2022  - перенос бумажных заметок по проекту
- Замечание: В целом, первоначальная попытка пилить код наивно-интуитивно ничего не дала. Только код запутался.
   Надо проектировать процессы, сверху вниз. Тогда ясно будет, что и как делать.
  - тут такая свалка задач получилась, все это надо переработать, по разделам разнести.
- Сначала надо сделать:
  - надо создать вики по проекту. 
  - надо создать раздел глоссария проекта
  - надо описать объекты Сущностей и их работу в проекте.
    - есть в папке документации в солюшене, надо все перенести в вики.
    - добавить в солюшен ссылку на вики проекта.
  - надо описать процессы в приложении: составить список в вики
    - запуск приложения
    - завершение приложения
    - показ/обновление дерева элементов
    - создание элемента
    - удаление элемента
    - просмотр карточки элемента
    - добавить еще процессы.
- в объект Элемента надо добавить поле Modified и отмечать его при любой записи в проперти, кроме загрузки из БД.
  - А дату последней модификации как обходить?
    - загружать из БД мимо проперти, в особом порядке. Передавать в функцию массив значений или все 12 параметров?
  - решено: 
    - поле Modified пока не вводить, 
    - измененные объекты сразу после модификации записывать в БД.
    - дату модификации заменять на текущую прямо в объекте внутри функции записи в БД (Update, Insert) перед записью непосредственно.
- Вопрос: планировщику задач требуется целое собранное дерево элементов в памяти?
  - вроде бы нет, он отдельные задачи потребляет без их связей с другими элементами.
- Задачи по проекту:
  + создать каркас для инфраструктуры для сборки проекта: VM, VS2008, sqlite, все утилиты, бекапить машину.
    - на виртуальной машине с этим дисплеем работать неудобно; большой монитор доставать не хочется; 
       рабочую среду на виртуальной машине держать - правильно, но пока не получается.
       Поэтому этот пункт был выполнен и затем я от него отказался. Так на ноуте и пилю неудобно.
  + создать проект планировщика задач
  - написать вики с описанием причин создания и особенностей проекта.
  - перечислить объекты/элементы проекта (не то же, что Сущности предметной области, и это - неправильно.)
  + Определить набор полей элементов проекта.
  + разработать БД для проекта.
  - переработать БД проекта, добавить индексы и написать запросы для функций.
  - написать документацию по БД проекта.
    - описать способ хранения элементов и процессы операций в БД. Там сложное получилось устройство.
  - реализовать элементы и их хранение в БД  и в памяти.
    - все элементы в одной таблице, а дополнительные поля - в отдельных таблицах по классам элементов.
    - Выбираем вариант а) все элементы хранятся в БД, все изменения немедленно записываются в БД, в памяти ничего не кешируется.
    - вариант б) все держим в памяти в виде связного дерева элементов, каждое изменение немедленно записывается в БД и перезагружает данные из БД в память. 
  + решить, можно ли использовать УАМХ. И если да, то как:
    а) копировать код из нее по частям, отдельными решениями.
    б) как библиотеку целиком? 
    - А ее нет целиком - надо собирать, доделывать и подключать к проекту.
    - прошлая попытка использовать УАМХ привела к тому, что проект стал слишком сложным и остановился.
    - Решение: отложить решение о внедрении УАМХ на последующие версии проекта. На третий релиз?
      Сейчас важно быстро сделать себе этот проект как инструмент. 
      Поэтому сейчас выбрать вариант а) таскать из УАМХ необходимые куски технологии.
    - так если УАМХ внедрять, то надо было все по УАМХ делать! А я Настройки из Оператора позаимствовал, а не из УАМХ.
      - там они лучше, чем в УАМХ. Но вот это все теперь надо свести в один набор, а я не могу. Там работы много, а мне некогда!.
  - нужна ли статистика Хранилища, подобно УАМХ, но для Задач?
    - одтельным объектом пока нет, а внутри приложения пригодится.
    - что в нее должно входить?
      - общее число задач?
      - число выполненных задач?
      - число остановленных задач?
      - число ожидающих задач?
      - каие еще категории содержимого для этого Хранилища есть?
  - запланировать создать оконные формы:
    - дерево элементов
      - как левый контрол главного окна приложения.
      - как отдельную форму выбора элементов с фильтром по типу, как в Инвентарь.
      - Список Сегодня с чекбоксами для задач и выделение важности задач цветом.
      - карточки элементов.
  - разработать файловую систему для проекта, для хранения добавляемых в описания элементво файлов.
    - подключить к проекту библиотеку MyCodeLibrary, контрол оттуда нужен, да и другой код тоже пригодится.
      - проще поместить этот контрол в код проекта, чем MyCodeLibrary собрать для применения.
  - реализовать менеджер файлов SolutionManager как подсистему проекта.
  - решить, как использовать теги.
  - добавить в проект заготовку справки
  - добавить в проект файл лицензионного соглашения
  - добавить папку инсталлятора и начальный скрипт инсталлятора для доработки позднее. 
  - подобрать иконку для приложения.
  - подобрать иконки для элементов дерева.
    - иконка зависит от типа элемента и наличия вложенных элементов: если есть вложенные элементы, основой изображения должна быть папка.
      - категории всегда показывать как папки.
      - теги показывать как камешки или ярлычки, всегда, поскольку они не могут иметь вложенных элементов.
      - заметки показывать листами заметок или папками с листами заметок, если они имеют вложенные элементы.
      - задачи показывать иконками задач или папками с иконкой задачи, если имеет вложенные элементы.
 - цель этапа: реализовать элементы и их хранение в БД.
   - тут бардак с этими планами из-за первоначальной сумятицы в разработке наспех.
   - написал теорию устройства и хранения - в папке документации в солюшене студии.
     - оно уже устарело, надо смотреть код.
   - разработать БД для проекта
   - привести в соответствие коду проекта документацию по БД - там все устарело, и индексы наобум назначены, без реальной потребности.
   - надо определиться, где будет храниться БД планировщика:
     - а) в месте, определенном Ос для приложения. Но не в Program Files теперь.
     - Б) в выбранном пользователем месте. Подобно википаду, вместе с каталогом для файлов, приносимых в свойства элементво линками.
        - нужен класс менеджера файловой системы.
   - написать запросы для функций проекта.
     - нужен список функций проекта. А его все еще нет.
     - сейчас написать запросы для добавления, изменения. удаления элементов. Потом посмотрим.
     - написать запросы для создания новой БД проекта.
     - описать процессы загрузки элементво из БД. Когда загружать элементы и их части?
       - паренты сразу загружать не надо. Только их ИД в коллекцию рефов.
       - теги сразу загружать не надо. Только их ид в коллекцию рефов.
       - дерево в памяти строить сразу не будем - читать только ид в колекцию рефов.
   - написать класс адаптера БД на основе базового SqliteDbAdapter. 
     - sqliteDbAdapter был взят из Оператор проекта и оказался неправильным - много лишних приведений и неправильный код ExecuteScalar()
       - TODO: не забыть исправить код в Оператор!
   - тестировать операции с БД
- нужен процесс планирования задач для окна Сегодня. А то сейчас все наобум.
- Хранение файлов материалов задач:
  - Если к элементу нужно добавить файлы, пользователь должен кликнуть кнопку или меню
    "Открыть папку материалов на сегодня" либо "Открыть папку материалов для задачи"
    - лучше папку материалов для задачи, если карточка задачи уже открыта.
    - лучше папку материалов на сегодня, если карточка задачи не открыта или задача еще не создана.
    - код создает или открывает ранее созданную такую папку, и пользователь добавляетв нее файлы материалов.
      Затем пользователь эти файлы переносит в описания элементво перетаскиванием, подобно Инвентарь или Википад.
      - а можно сразу перемещать файлы в эти папки как результат перетаскивания.
        - но тогда надо различать, что делать с этими файлами: просто создать ссылку на файл/папку; переместить в хранилище; копировать в хранилище.
          Или надо запрашивать это каждый раз, или что-то придумывать по месту.
        - вариант вручную размещать файлы где-то - тоже не выглядит удобным, все же...  
    - файлы из этих папок удалять вручную только. Пока.
    - структура папок:
      - Каталог проекта
        - БД проекта
        - Материалы     - каталог раздела файлового склада материалов для элементов
          - TASK001     - каталог материалов к задаче с ид=001
          - CAT002      - каталог материалов к категории с ид=002
          - 2023-01-01  - каталог материалов на дату 01012023.





