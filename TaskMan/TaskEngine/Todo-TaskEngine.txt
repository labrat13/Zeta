Файл рабочих задач для проекта TaskEngine - Движок менеджера задач.

Цели проекта:
- быстро изготовить простой инструмент: средство для записи задач по видам деятельности и проектам, в виде дерева.

Этапы проекта: (примерные, порядок может измениться)
+ создание проекта
- описание концепции и процессов приложения, предметной области приложения, глоссария.
- разработка основных компонентов движка как Сущностей предметной области
- разработка системы хранения данных (БД)
- разработка менеджера файлов
- разработка подсистемы настроек приложения
- разработка и реализация графического интерфейса пользователя
- интеграция частей проекта.
- разработка инсталлятора
- изготовление документации пользователя
- очистка кода и изготовление документации разработчика проекта.
- сборка первого релиза и инсталлятора.
- тестирование первого релиза.


02 декабря 2022  - перенос бумажных заметок по проекту
- Замечание: В целом, первоначальная попытка пилить код наивно-интуитивно ничего не дала. Только код запутался.
   Надо проектировать процессы, сверху вниз. Тогда ясно будет, что и как делать.
  - тут такая свалка задач получилась, все это надо переработать, по разделам разнести.
- Сначала надо сделать:
  + надо создать вики по проекту. 
  + надо создать раздел глоссария проекта
  - надо описать объекты Сущностей и их работу в проекте.
    + есть в папке документации в солюшене, надо все перенести в вики.
    + добавить в солюшен ссылку на вики проекта.
  - надо описать процессы в приложении: есть список в вики.
- в объект Элемента надо добавить поле Modified и отмечать его при любой записи в проперти, кроме загрузки из БД.
  - А дату последней модификации как обходить?
    - загружать из БД мимо проперти, в особом порядке. Передавать в функцию массив значений или все 12 параметров?
  - решено: 
    - поле Modified пока не вводить, 
    - измененные объекты сразу после модификации записывать в БД.
    - дату модификации заменять на текущую прямо в объекте внутри функции записи в БД (Update, Insert) перед записью непосредственно.
- Вопрос: планировщику задач требуется целое собранное дерево элементов в памяти?
  - вроде бы нет, он отдельные задачи потребляет без их связей с другими элементами.
- Задачи по проекту:
  + создать каркас для инфраструктуры для сборки проекта: VM, VS2008, sqlite, все утилиты, бекапить машину.
    - на виртуальной машине с этим дисплеем работать неудобно; большой монитор доставать не хочется; 
       рабочую среду на виртуальной машине держать - правильно, но пока не получается.
       Поэтому этот пункт был выполнен и затем я от него отказался. Так на ноуте и пилю неудобно.
  + создать проект планировщика задач
  + создать вики с описанием причин создания и особенностей проекта.
  + перечислить объекты/элементы проекта (не то же, что Сущности предметной области, и это - неправильно.)
  + Определить набор полей элементов проекта.
  + разработать БД для проекта.
  - переработать БД проекта, добавить индексы и написать запросы для функций.
  - написать документацию по БД проекта.
    - описать способ хранения элементов и процессы операций в БД. Там сложное получилось устройство.
  - реализовать элементы и их хранение в БД  и в памяти.
    - все элементы в одной таблице, а дополнительные поля - в отдельных таблицах по классам элементов.
    - Выбираем вариант а) все элементы хранятся в БД, все изменения немедленно записываются в БД, в памяти ничего не кешируется.
    - вариант б) все держим в памяти в виде связного дерева элементов, каждое изменение немедленно записывается в БД и перезагружает данные из БД в память. 
  - запланировать создать оконные формы:
    - дерево элементов
      - как левый контрол главного окна приложения.
      - как отдельную форму выбора элементов с фильтром по типу, как в Инвентарь.
      - добавить в сборку Движка после тестирования в приложении.
    - Список Сегодня с чекбоксами для задач и выделение важности задач цветом.
      - добавить в сборку Движка после тестирования в приложении.
    - карточки элементов.
      - добавить в сборку Движка после тестирования в приложении.
    - карточка свойств Хранилища - для создания Хранилища, просмотра и редактирования свойств Хранилища, согласно УАМХ.
      - добавить в сборку Движка после тестирования в приложении.
    - нужна форма просмотра свойств Хранилища и статистики Хранилища - все в одном гриде.
  - решить, как использовать теги.
  - добавить в проект заготовку справки
  - добавить в проект файл лицензионного соглашения
  - добавить папку инсталлятора и начальный скрипт инсталлятора для доработки позднее.
  - добавить правильные версии для всех проектов и описать версии в файлах Version всех проектов.
    - 1.0.0.0 для всех проектов
 - добавить правильное описание файла в свойствах каждого проекта.
  - подобрать иконку для приложения.
  - подобрать иконки для элементов дерева.
    - иконка зависит от типа элемента и наличия вложенных элементов: если есть вложенные элементы, основой изображения должна быть папка.
      - категории всегда показывать как папки.
      - теги показывать как камешки или ярлычки, всегда, поскольку они не могут иметь вложенных элементов.
      - заметки показывать листами заметок или папками с листами заметок, если они имеют вложенные элементы.
      - задачи показывать иконками задач или папками с иконкой задачи, если имеет вложенные элементы.
   - добавить это в вики проекта в раздел дерева элементов.
 - цель этапа: реализовать элементы и их хранение в БД.
   - тут бардак с этими планами из-за первоначальной сумятицы в разработке наспех.
   - написал теорию устройства и хранения - в папке документации в солюшене студии.
     - оно уже устарело, надо смотреть код.
   + разработать БД для проекта
   - привести в соответствие коду проекта документацию по БД - там все устарело, и индексы наобум назначены, без реальной потребности.

   - написать запросы для функций проекта.
     - нужен список функций проекта. А его все еще нет.
     + сейчас написать запросы для добавления, изменения. удаления элементов. Потом посмотрим.
     + написать запросы для создания новой БД проекта.
     - описать процессы загрузки элементов из БД. Когда загружать элементы и их части?
       - паренты сразу загружать не надо. Только их ИД в коллекцию рефов.
       - теги сразу загружать не надо. Только их ид в коллекцию рефов.
       - дерево в памяти строить сразу не будем - читать только ид в колекцию рефов.
   + написать класс адаптера БД на основе базового SqliteDbAdapter. 
     - sqliteDbAdapter был взят из Оператор проекта и оказался неправильным - много лишних приведений и неправильный код ExecuteScalar()
       + TODO: не забыть исправить код в Оператор!
   - тестировать операции с БД
- нужен процесс планирования задач для окна Сегодня. А то сейчас все наобум.


08 декабря 2022
+ добавлена папка подсистемы УАМХ-2, чтобы классы УАМХ не расползлись по проекту.
  Классы из УАМХ должны добавляться в эту папку немодифицированными, а модифицированные - разноситься по соответствующим подсистемам.
  - так проще будет потом вывести все УАМХ-классы в собственную сборку УАМХ-2.
- создаем подсистему Настроек и свойств Хранилища
  + добавлен класс TaskEngineSetting для файла настроек Хранилища согласно УАМХ-2.
    - несовместимо с моими Хранилищами, так как они реализованы на более старой версии, пред-УАМХ.
  + в движок добавлена функция public TaskEngineSettings CEngine.StorageGetInfo()
    + для нее добавлен конструктор копирования в TaskEngineSettings и его базовый класс.
      - можно было просто клонировать перебирая в цикле элементы словаря, 
         но это не позволит контролировать правильность данных в словаре.
  + нужна еще функция TaskDbAdapter.fillStorageInfo(info);
    + сделано 10.12.2022
    + нужен код запросов выборки или код перебора всех элементов БД.
      - запросы с COUNT() быстрее
      - переборка всех записей таблицы элементов и раскидать по счетчикам - проще.
  + нужна еще функция FSM.fillStorageInfo(info);
    - отложить до готовности самого класса FSM. Он пока никак не начат даже.
    + вроде сделал, надо тестировать.
  - нужна форма просмотра свойств Хранилища и статистики Хранилища - все в одном гриде.


  10 декабря 2022
  - класс SubsystemBase удалить, после того как из него в класс Движка будет скопирован пример строения.
    - сам он не используется, служит только примером.
  - разработать управление каталогом Хранилища
    + разработать файловую систему для Хранилища.
    - разработать файловую систему для хранения добавляемых в описания элементов файлов.
    - подключить к проекту библиотеку MyCodeLibrary, контрол оттуда нужен, да и другой код тоже пригодится.
      - проще поместить этот контрол в код проекта, чем MyCodeLibrary собрать для применения.
    + реализовать менеджер файлов StorageFolderManager (FSM сокращенно) как подсистему проекта.
    + надо определиться, где будет храниться БД планировщика:
      - а) в месте, определенном Ос для приложения. Но не в Program Files теперь.
      + Б) в выбранном пользователем месте. Подобно википаду, вместе с каталогом для файлов, приносимых в свойства элементво линками.
        + нужен класс менеджера файловой системы - добавлен StorageFolderManager.
- Хранение файлов материалов задач:
  + добавить это в вики в подсистему управления каталогом хранилища
    + wiki:///C:/Users/1/Documents/gitrepo/Zeta/Справочники/Wiki-TaskMan/Wiki-TaskMan.wiki?page=КонцепцияКаталогХранилищаЗадач
    - пилить теорию там, в вики.
    - структура папок:
      - Каталог Хранилища
        - файл БД Хранилища
        - файл бекапа БД Хранилища
        - ФайлСвойствХранилища
        - Материалы     - каталог раздела файлового склада материалов для элементов
          - TASK001     - каталог материалов к задаче с ид=001
          - CAT002      - каталог материалов к категории с ид=002
          - 2023-01-01  - каталог материалов на дату 01012023.
- Затем надо разработать и наполнить хранение файлов документов и сам FSM весь.
 
  
