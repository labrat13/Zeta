
Таблица Elements - хранение данных всех элементов
- id		int		table id
- elid		int		CElementId eid							Идентификатор элемента
- title		string	String Title							Название элемента
- descr		string	String Description						Однострочное описание элемента
- remark	string	String Remarks							Многострочные заметки по элементу
- creatime	?		DateTime CreaTime						Дата создания элемента
- moditime	?		DateTime ModiTime						Дата изменения элемента
- eltype	int		EnumElementType ElementType				Код типа элемента
- parent	int		CElementId Parent						Ссылка на родительский элемент в дереве элементов
- elstate	int		EnumElementState ElementState			Состояние активности элемента


Таблица Tasks - хранение данных Задач
- elid		int		element id								
- state		int		EnumTaskState CTask.TaskState			Состояние задачи
- prio		int		EnumTaskPriority CTask.TaskPriority		Важность задачи
- comptime	?		DateTime CTask.TaskCompletionDate		Дата завершения задачи для планировщика
- result	string	String CTask.TaskResult					Перечень целей задачи отдельно от описания


Таблица Tagged - хранение связей тегов
- id		int		tableid									первичный ключ таблицы
- elid		int		element id								идентификатор элемента
- tagid		int		tag element id							идентификатор элемента-тега

---------------------------------------
BEGIN TRANSACTION;
CREATE TABLE "Tasks"(     "id" Integer PRIMARY KEY  NOT NULL  ,      "state" Integer  NOT NULL   DEFAULT (0),      "prio" Integer  NOT NULL   DEFAULT (0),  "starttime" Integer  NOT NULL   DEFAULT (0),   "comptime" Integer  NOT NULL   DEFAULT (0), "result" Text  NOT NULL  );
CREATE TABLE "Tagged"(     "id" Integer Primary Key Autoincrement  NOT NULL  ,      "elid" Integer  NOT NULL   DEFAULT (0),      "tagid" Integer  NOT NULL   DEFAULT (0));
CREATE TABLE "Elements"(     "id" Integer Primary Key  NOT NULL  ,     "parent" Integer  NOT NULL   DEFAULT (0),        "title" Text  NOT NULL  ,      "descr" Text  NOT NULL  ,      "remark" Text  NOT NULL  ,      "creatime" Integer  NOT NULL   DEFAULT (0),      "moditime" Integer  NOT NULL   DEFAULT (0),      "eltype" Integer  NOT NULL   DEFAULT (0),         "elstate" Integer  NOT NULL   DEFAULT (0));
CREATE UNIQUE INDEX ix_tagged_tagid ON Tagged(tagid ASC);
CREATE UNIQUE INDEX ix_tagged_elid ON Tagged(elid ASC);
COMMIT;

-------------------------------------
Функции для свойств Хранилища:
- Общее количество элементов указанного типа, не включая удаленные: SELECT COUNT(id) FROM Elements WHERE ((eltype = ?) AND ((elstate = ?));
 - это для Категорий, задач, заметок, тегов, с указанным состоянием.
- Общее количество удаленных элементов:  SELECT COUNT(id) FROM Elements WHERE (elstate = ?);
 - это для элементов с указанным состоянием.
- Количество приостановленных/выполненных/активных задач:   SELECT COUNT(id) FROM Tasks WHERE (state = ?);
  - Это для Задач с указанным состоянием выполнения
-------------------------------------
Выборка задач для планировщика: Что показывать в списке Сегодня?
 - задача должна иметь статус Задачи: активна или приостановлена. 
   - Показывать ли приостановленные задачи в списке Сегодня?
 - задача не должна быть помечена удаленной.
 - выборка задач по дате начала:
   - датаСегодня: начало следующего для от сегодня, в 0:00:00.
   - дата начала задачи должна быть ранее/менее, чем датаСегодня плюс размер окна в будущее (3 дня типично).
     - элементы списка должны быть сортированы по дате начала задачи.
       - эту сортировку можжно сделать программно после получения выборки.
- попробуем составить запрос: 
  - SELECT id FROM Tasks WHERE ((starttime < ?) AND ((state = EnumTaskState.Run) OR (state = EnumTaskState.Paused)));
  - потом по каждому идентификатору элемента получаем данные из Elements и Tasks и Tags, чтобы не писать новую функцию.
  - потом программно сортируем по дате начала?
-------------------------------------


--------------------------------------









