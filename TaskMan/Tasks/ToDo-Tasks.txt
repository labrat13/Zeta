Файл рабочих задач для проекта Tasks - Приложение менеджера задач.

02 декабря 2022 - создание проекта

12 декабря 2022
- создание главной формы, по причине необходимости реализовать Процесс запуска приложения.
  + добавлено главное меню и обработчики для его пунктов.
    - не все обработчики главного меню добавлены пока.
  + добавлен тулбар для быстрых кнопок главой формы
    - пока пустой, надо добавить кнопки и разделители по мере выявления потребности в них.
  + добавлен статусбар главной формы.
  + добавлена функция изменения текста заголовка главной формы.
  + добавлена функция изменения текста статусбара главной формы.
  + добавлена функция вывода диалога сообщения об ошибке.
  + добавлена функция запуска файла справки "Справка.chm" из каталога приложения.
    + надо добавить в проект болванку файла справки, чтобы оно работало.
      + добавлена болванка от Инвентарь.
  + добавлены обработчики FormLoad, FormClosing, FormClosed.
    + Наполнены 
  - в левую половину главной формы добавлен TreeView,
    - надо настроить свойства контрола
    - надо привязать события контрола.
    - надо привязать к контролу колекцию иконок с правильными тегами.
      - надо внести эти теги и индексы иконок в документацию проекта.
    - надо привязать к контролу контекстное меню 
      - для него нужны иконки?
      - для каждого типа элемента - свое контекстное меню нужно.
- придумать, что поставить в правую половину главной формы.
  - там должно быть Список Сегодня. Но я пока не знаю, как егореализовать.
    - нужно провести макетирование представления Список Сегодня.
- надо впихать в проект мой контрол текстового редактора или сделать его тут заново.
- надо добавить настройки в файл настроек приложения.
  + AutoStartStorage - поле пути к автооткрываемому хранилищу.
    - надо убедиться, что пользователь может назначить этот путь к Хранилищу через GUI. 
      - и путь должен проверяться на правильность перед назвначением, а не после.
  - хранение последних открытых Хранилищ и флаг, запоминать ли их ?

13 декабря 2022
- добавил в проект файлы-заготовки:
  - Лицензионное соглашение.txt
    - надо заменить ХХХ на название программы.
  - Справка.chm
    - это пустая болванка, ее надо заменить нормальной справкой.
      - надо написать веб-страницы по шаблону и скомпилировать в такой файл справки.
      - шаблон лежит в папке C:\Users\1\Documents\gitrepo\Zeta\TaskMan\Документация
- написал код для создания Хранилища, наскоро, только для отладки.
  - добавил форму StorageCreateForm, которая нужна в процессе создания Хранилища.
  - форма StorageShortInfoForm - оказалась пока что лишней, она более подходит для просмотра свойств Хранилища, а не для создания Хранилища.
  - надо проектировать весь процесс создания Хранилища, сейчас он только для отладки остальных процессов.
  + первый тест успешно, Хранилище создано.
- написан код для открытия Хранилища - вроде хорошо, нарисовал блок-схему, описал ее в вики.
  - пометил места для вставки начала и конца диалога бегущего прогресс-бара, чтобы пользователь ожидал загрузки Хранилища при большой БД.
  - первый тест успешно, Хранилище открыто.
  - блок-схема устарела, ее надо перерисовать и поправить в вики.
- код для закрытия Хранилища вроде бы написан,  наскоро, только для отладки.
  - надо проектировать весь процесс закрытия Хранилища, сейчас он только для отладки остальных процессов.
  - первый тест успешно, Хранилище закрыто.
- надо бы еще создать пункт меню для просмотра и редактирования свойств Хранилища, но пока нет формы с propertyGrid для показа.
+ процесс закрытия главного окна не придуман, сейчас все на авось происходит.
  + готово. весь код должен быть в Form_Closed(). 
  - А в  Form_Closing() должен быть флаг блокировки закрытия формы, пока на экране есть формы карточек элементов.
  
15 декабря 2022
- Новый этап проекта: Отображение дерева элементов
  - дерево элементов в БД уже есть. Надо его показать в:
    - левой панели главного окна
      - нужны процессы работы с Корзиной через ДеревоЭлементов.
      - нужны процессы работы с Хранилищем Файлов через ДеревоЭлементов.
    + отдельном диалоге выбора элементов SelectElementForm.
      + готово 20.12.2022
      + нужен флаг типа элемента для фильтра показываемых элементов.
        + показывать только Категории либо Категории и Теги, либо Категории и Заметки либо Категории и Заметки и Задачи.
        + это флаговый енум, а EnumElementType сейчас не флаговый. 
          + надо переделать EnumElementType во флаговый енум и проверить все места, где он используется.
      + нужен начальный элемент дерева, чтобы не все общее дерево показывать, а только некоторую ветвь.
 - где взять код?
   + Инвентарь  поискать?
     + разобрал Инвентарь, но там все немного старое, оригинальное, но работает.
   - дипломный проект поискать?
     - облом пока что. 
   - есть примеры из МенеджерПроектов
     + на первое время сойдет, но там много недоделок.
- тестировать алгоритм лучше на диалоге выбора элементов, там меньше возни, неудачный класс можно просто удалить и все заново начать.

18 декабря 2022
- Дерево элементов из БД отображается в отдельном диалоге выбора элементов SelectElementForm.
  Этот диалог используется как тестовый полигон для коды дерева элементов.
  Переносить в главную форму пока еще рано. Код еще надо пошлифовать.
  - форма не должна показывать удаленные элементы - вроде это сделано.
    - эта форма не годится для показа элементов из Корзины, поскольку они удаленные. Тут нужен другой код?
      - Корзина это виртуальный каталог, там все равно нужен другой код. 
        Но есть проблема: если в корзину складывать удаленные элементы в один ряд, будет непонятно, откуда они.
        А если складывать с каталогами, в этих каталогах не найдешь ничего потом.
        Вариант: удаленному элементу в корзине приписывать путь в дереве, по которому он реально располагается, как описание ноды.
        Но это потребует из БД извлечь все удаленные элементы, для каждого из них построить цепочку ид и текстовый путь.
        Это нагружать Бд будет сильно, наверное. Потом разберусь с этой проблемой.
        TODO: перенести эту проблему в вики а сюда вставить только ссылку на вики. 
        Корзину надо проектировать отдельной темой.
  - форма не должна показывать элементы, которые не указаны в фильтре типа допустимых элементов, кроме категорий, которые соединяют всю структуру.
    + вроде сделано.
  - форма должна возвращать  выбранный элемент только одного из тех типов, которые указаны в фильтре типа допустимых элементов.
    + вроде сделано.
  - форма должна возвращать ид нового выбранного элемента, а пока она ничего не возвращает.
    - а точно ид, а не объект? Объект намного универсальнее, ид из него получить проще, и другие свойства тоже под рукой.
    + форма возвращает объект элемента.
  - форма должна корректно обрабатывать ошибки и не допускать повреждения БД или сеанса БД.
    - это все должен делать вызывающий форму код. Там проще все это ловить. 
  - форма должна сохранять между показами формы позицию на экране и размер окна.
    + сделано.
  - обработчики событий дерева реализованы неправильно. Надо поискать пример в интернете, чтобы потом меньше исправлять.
    + переделал по примеру из Инвентарь: половина из Инвентарь, половина того, что сам сочинял вчера.
      Выбрал лучшее из обоих версий, все польза от проделанной работы.
- Корзина и другие виртиуальные элементы в этом дереве не реализованы пока что.
  - их можно реализовать в производном классе менеджера дерева, а то многовато тут получается параметров передавать в форму.

18 декабря 2022
+ форма SelectElementForm готова: 
  + Справа добавлен текстбокс расширенного описания элемента.
  + Позиция и размеры формы сохраняются в настройках приложения.
  + Форма возвращает объект выбранного элемента.
  + БД открыта на все время показа формы.
  + исключения должен ловить вызывающий форму код.
  + менеджер показывает форму, элементы выбираются, вроде бы все работает.

20 декабря 2022
 + добавить сохранение позиции и размера главной формы в настройках приложения.
   + done
 + добавить закрытие открытого Хранилища при закрытии формы.
   + done
 + добавить заготовки текстов полей элементов для форм карточек элементов, в настройках приложения.
   + done. 
 - надо потом в карточках элементов их загружать, не забыть что они есть.
 - надо добавить средство редактирования этих текстов пользователем (диалог с текстбоксом и кнопками Ок Отмена ?)
 
 Цель: отобразить дерево элементов в главном окне приложения.
 + использовать новый менеджер дерева, производный от существующего?
   + производный от отдельного базового класса, в который перенесены все необходимые константы, функции и поля.
 - фильтра допустимых элементов тут не надо, надо показывать элементы всех типов.
 - проверять зависимости иерархии элементов не надо.
 - нужны контекстные меню нод с допустимыми операциями для элементов каждого типа.
   Это надо их на бумаге для каждого типа элементов выписать. Наобум плохо будет.
   А можно на каждый тип элемента свой объект контекстного меню создать, и потом его пополнять - так удобно будет.
   - создать: задачу, заметку.
   - удалить текущий элемент.
   - просмотреть текущий элемент.
   - восстановить элемент корзины.
 - Нужны операции для дерева в целом - в меню Правка или Вид их поместить. 
   - Инвентарь как пример можно установить и посмотреть. Но там тоже корявовато.
 - Нужно куда-то пристроить панель параметров поиска
   - как в Инвентарь, на всегда доступную вкладку справа?
   - и что она будет искать? По типу элемента, по образцу текста в названиях, описаниях, итп текстовых полях?
 - Теги как должны работать? По ним нужна теория.
 - Правая половина главного окна что делает?
   - окно или вкладка Сегодня при старте приложения.
   - информация о выделенном в дереве элементе - как это было в Инвентарь.
     - это позволит быстро просматривать структуру элементов, кликая по дереву слева.
     - но редактировать элементы так неудобно, путаница между просмотром и редактироваием 
        и созданием нового объекта была в Инвентарь. Отдельные карточки элементов лучше должны быть.
   - вкладка поиска предлагается с результатами поиска.
 - надо перечислить работы по этой цели:
   - нужен процесс отображения Корзины в ДеревоЭлементов.
   - нужен процесс отображения ХранилищеФайлов в ДеревоЭлементов.
   - решить, при каком событии дерева показывать карточку Элемента из данной ноды.
     - Это годится, но надо переделать SelectElementForm для того, чтобы он работал подобным образом. 
        Чтобы все деревья в приложении управлялись одинаково. 
       - одиночный клик выделяет и разворачивает ноду и показывает ее свойства.
       - двойной клик выделяет ноду и запускает действие (форму карточки элемента).
       - одиночный правый клик показывает контекстное меню для ноды данного типа элемента.
   - решить, на каждый элемент свой экземпляр формы или одна на всех; мультимодальный режим формы или нет.
     - изучить, можно ли реализовать много карточек одновременно.
     - изучить, как не допускать открытия двух карточек одного элемента. 
   - Придумать теорию про работу с тегами.
     - ими помечают другие элементы, чтобы использовать их как альтернативные категории.
     - но помеченные тегами элементы не показывать в ДеревоЭлементов как субноды тегов?
     - а как тогда теги применять, чтобы быстро и легко?
       Вариант А: кликаешь по тегу в дереве, справа показывается список всех элементов, помеченных этим тегом.
       Список этот вроде окна Сегодня, или окна результатов поиска. Только оформление другое.  
       Свойства тега редактировать только через КарточкаТега, вызываемая через контекстное меню дерева.
       Тег это относительно стабильная сущность, незачем его быстро или часто править. 
     - Получается, работа с тегами не придумана, и теги сейчас - просто чтобы были. 
       Авось потом до них очередь дойдет, может быть. Сейчас некогда.

Свалка записей
- нужна форма свойств Хранилища полная на основе PropertyGrid.
  - она потребует атрибуты для проперти, они описаны в справке по  PropertyGrid.
  - если этот механизм не подтянет проперти из базового класса, то придется создавать отдельный класс только для показа в этом PropertyGrid.
    - как узнать это заранее?
- сделать формы:
  - категории
  - Заметки
  - Задачи
  - Теги
  - Свойства Хранилища полные
  - Сегодня как панель
  - Диалог выбора элементов из дерева элементов
    - с фильтром по типу элементов
    - с показом ноды исходного элемента.
      Например, если нужны теги, то начальная нода указывается Теги из основного дерева и вот по ней все содержимое  вносится в дерево.
      А элементы неправильного типа - не давать пользователю выбирать.
  - Диалог настроек
  - Диалог текстовых шаблонов для элементов.
  - 
- какие есть виды окон в NET?   
- добавить в вики проекта знания о Хранилище файлов - в том числе, из старых вики уже готовые знания, а из классов кода - уже готовые функции.
  - я все эту документацию пытаюсь делать. а она нужна только в сложных случаях, а потом я ее забрасываю.
    Она вся - куча недоделок и заготовок. Всегда нет времени ее закончить.
- Написание процессов проекта - запланировать.
  - составить список процессов и пополнятьегов вики.
  - описывать процессы со ссылками на объекты Сущностей в Глоссарии.
- делать только необходимые фичи.
- дополнять Глоссарий проекта
  - копировать материалы из предыдущих вики, как материалы, требующие переработки.
    - это увеличивает бардак в проекте, лишнюю работу делать придется. 
  - перерабатывать материалы 
- нарисовать диаграммы классов для каждой подсистемы проекта.
- добыть и установить UML-моделер с генерацией модели по коду и наоборот.
 - триала на 30 дней хватит?
 - триалка плоха тем, что модель собрал, а использовать ее нельзя потом. 
   Одноразовая работа, результаты не накапливаются с этими диаграммерами.
 - поискать в интернете ключ демо-версии, а то Хз как там пойдет запрос халявы.
- определить перечень настроек приложения планировщика, не жвижка.
  - последние открытые Хранилища?
- Иконки в коллекции иконок для меню и treeview откуда берутся?
  - из файла ресурсов формы как двоичный поток. Нельзя их из ресурсов приложения выбирать. 
  - надо внести это в вики!



21 декабря 2022
Работы по Корзине:
+ внести тексты о Корзине в вики проекта, а сюда - ссылку на эту старницу.
  + сделано: wiki:///C:/Users/1/Documents/gitrepo/Zeta/Справочники/Wiki-TaskMan/Wiki-TaskMan.wiki?page=КонцепцияКорзина
- Добавить в код
    + класс менеджера дерева главного окна MainFormTreeViewManager - добавлен, наполнен заготовкми функций.
      - производный от менеджера диалога выбора элементов, чтобы унаследовать шрифты и константы.
      - все основные функции переопределить придется, только часть из них можно наследовать без изменений.
      - а можно не наследовать, а вынести эти члены класса в базовый класс еще выше дерева выбора элементов.
        + добавлен базовый класс TreeViewManagerBase и в него перенесены общие члены классов. 
          Класс ElementTreeViewManager наследует члены ьазового класса, старый лишний код из него удален, класс скомпилирован, протестирован.
    + класс кеша на основе словаря <int id, string title>  - добавлен Utilities.StringIntCache
      + из mycodelibrary? Там свалка недоделок.
    + Функции запросов к БД:
      + выборка получения имени по ид элемента: SELECT title FROM Elements WHERE (id = ?); 
        + сделано:  public String SelectElementTitle(int id)
      + выборка всех удаленных элементов: SELECT * FROM Elements WHERE (elstate = ?)
        + сделано: public List<CElement> SelectElementsByElementState(EnumElementState state)
      + выборка получения состояния удаления по ид элемента: SELECT elstate FROM Elements WHERE (id = ?); 
        + сделано: public EnumElementState GetElementStateByElementId(int id)
      + проверка, что все элементы в цепочке (кроме последнего?) не являются удаленными.
        + сделано: public bool IsAllElementsActive(List<int> idChain)
    + иконку Корзины в коллекцию иконок дерева и ее индекс в константы индексов иконок дерева.
      + добавлен IconIndex_Trashcan в классе TreeViewManagerBase.
      + добавлена иконка в коллекцию иконок дереваглавной формы
    - решено не добавлять: элемент Корзина в БД и ее константу в класс адаптера БД.
      - убедиться, что константа учитывается в остальном коде, где используются прочие константы.
      - выписать места, где константы используются вообще, положит около самих констант.
    - обработчики событий ноды: надо составить список.
    + функцию сортировки элементов по убыванию даты изменения элемента. В класс CElement.
      + добавлен public static int SortElementsByModificationTime(CElement x, CElement y)
+ добавить в менеджер дерева главного окна объект - словарь контекстных меню элементов,
  Чтобы прицеплять контекстные меню к нодам дерева согласно типу элемента - в ветвях Задач и Тегов.
  А в ветви Корзина прицеплять контекстное меню корзины.
  + класс создан: NodeContextMenuCollection
  + передать в конструктор менеджера как объект при создании менеджера.
  + потребуется новая функция создания ноды - такая же, но с добавлением контекстного меню согласно типу элемента.
    + добавлена: protected override TreeNode MainFormTreeViewManager.MakeTreeNode(CElement obj, bool addTempSubnode)
  + потребуется новая функция создания ноды для элементов внутри корзины - такая же, но с контекстным меню элемента корзины.
    + Добавлена: protected TreeNode MainFormTreeViewManager.MakeTreeNodeForTrashcan(CElement obj, bool addTempSubnode)
- операцию очистки всей корзины надо реализовать только в меню Инструменты приложения.
  + Пункт меню Очистить Корзину добавлен, обработчик создан.
  - надо написать код очистки корзины от всех удаленных элементов.
    - надо запросить подтверждение операции.
    - надо убедиться, что операция удаление элемента из БД удаляет его из всех таблиц БД.
    - если нода Корзина была развернута в дереве элементов, надо обновить дерево или свернуть ноду Корзина.

22 декабря 2022
- пишем код для отображения дерева элементов главного окна приложения
  - первичный показ дерева  ShowTree()
    + готов, не тестирован.
  - сворачивание ноды NodeBeforeCollapse()
    + готово, не тестирован. 
  + развертывание ноды NodeBeforeExpand
    + как определить, что развертываемая нода - Корзина?
      + добавить ее ноду в переменную класса при каждом создании ноды Корзина. А потом сравнивать ноды.
    + готово, не тестирован.
  - обновление дерева после изменения  UpdateTree()
    + готово, не тестирован.
- тестирование:
  - БД пришлось держать постоянно открытой на весь сеанс работы с Хранилищем.
    Иначе в дереве не работает сворачивание нод, итп.
  - сворачивание пустой ноды корзины невозможно после разворачивания.
    - в ноду без субнод надо вставлять временный элемент, чтобы ее можно было свернуть. 
      - Сложно тут. Надо продумать это лучше.
- действия по резульатам кликов сведены в 4 функции:
  - LeftPanelAction_TrashcanRootSelect(TreeNode node)
  - LeftPanelAction_ElementSelect(CElement elem)
  - LeftPanelAction_TrashcanRootDoubleClicked(TreeNode node)
  - LeftPanelAction_ElementDoubleClicked(CElement elem)
  - далее надо работать по этим элементам
- дерево пока еще не настроено для работы - все время что-то не так.
  - по одиночному клику элемент должен выделяться и раскрываться и обработчик его свойств вызываться.
  - по двойному клику элемент должен запускать обработчик - показывать карточку элемента.
- контекстное меню нод не вызывается никак.
  - вызывается, все работает. но надо добавить пункты в контекстные меню все.
    - хотя бы пункт показа карточки элемента. Свойства..
    - и обработчики этих пунктов тоже.
    - это работы на день, если все распланировать и по списку пилить. Надо так и сделать!
- надо навести порядок в классе формы - там уже очень много функций и они все вразброс.

23 декабря 2022
+ добавил пункты контекстных меню и их обработчики в конец формы.
  - они все используют текущий выделенный в дереве элемент, который должен быть доступен из объекта менеджера дерева.
    Он там обновляется по событию AfterSelect
+ иконки для пунктов контекстных меню добавлены в файл ресурсов приложения и в сами пункты меню.
+ иконки для главного меню добавлены в файл ресурсов и сами пункты меню.
- Важно: В форме уже столько функций обработчиков, что надо как-то уменьшать общее число функций класа формы.
  А иначе начнет глючить парсер и подсветка кода.
  - Обработчики надо оставить на месте, нельзя перемещать - их студия автоматически создает и управляет ими.  
    Остается только два варианта:
    А) создать еще файл partial class MainForm и вынести в него все функции собственно работы в классе.
    - не проверено, будет ли он компилироваться и не заглючит ли студия с ним.
    Б) переносить все рабочие функции в классы менеджеров, как для дерева сделано, 
       либо как статические функции в классы-сборники функций.
--------------------------------------------------------------------------------------------------
TODO: перенести это в вики после реализации в коде.
Идея: поскольку все равно везде используется список задач в том или ином виде, 
  то их отображение в ListView следует реализовать как один класс ListViewManager.
  И использовать его для всех отображений списков задач.
  - окно задач если расширить до бесконечности - будет общий список задач.
  - прошлое поместить вниз, будущее наверх списка? представление вроде тетриса получится.
  - только как бы различать задачи вчера и сегодня, без промежуточных разделителей, чтобы использовать разные виды ListView?
    - по цвету фона? прошлое пометить каким цветом?, будущее - каким цветом?
      - в настройках записать их значения, пользователь сам выбирает пусть.
  - сортировать задачи по дате начала или завершения?
    - по дате начала отбирать для показа, а по дате завершения - что?
  - сортировать задачи по алфавиту внутри группы по дате.
    - чтобы группировать все Купить в одном месте.
    - это предполагает, что все названия задач начинаются с глагола в первичной форме.
    - синонимы глаголов действий не учитываются. Пока. 
      - todo: отложить группировку задач по синонимам глаголов на последующие релизы. 
Выборка задач для планировщика: Что показывать в списке Сегодня?
 - задача должна иметь статус Задачи: активна или приостановлена. 
   - Показывать ли приостановленные задачи в списке Сегодня?
 - задача не должна быть помечена удаленной.
 - выборка задач по дате начала:
   - датаСегодня: начало следующего для от сегодня, в 0:00:00.
   - дата начала задачи должна быть ранее/менее, чем датаСегодня плюс размер окна в будущее (3 дня типично).
     - элементы списка должны быть сортированы по дате начала задачи.
       - эту сортировку можжно сделать программно после получения выборки.
- попробуем составить запрос: 
  - SELECT id FROM Tasks WHERE ((starttime < ?) AND ((state = EnumTaskState.Run) OR (state = EnumTaskState.Paused)));
  - потом по каждому идентификатору элемента получаем данные из Elements и Tasks и Tags, чтобы не писать новую функцию
  - потом удаляем задачи выполненные и удаленные.
    - или выполненные показываем? Решить.
  - потом программно сортируем по дате начала?
    - или по дате завершения? Решить.
- новый алгоритм с окном шириной N.
  - из настроек получаем полуразмер окна N.
  - из настроек получаем вариант окна: по N дней или по N задач.
    - по N задач - это окно по списку задач.
      - потому, что я все равно не могу сделать более 3 задач за день.
        Но число N должно быть большим, чтобы я мог выбирать важные задачи из этого списка.
    - по N суток - окно по шкале времени.
  - вычисляем дату Сегодня.
  - Вариант окна А: показываем N задач 
    - 1. показываем N задач до даты Сегодня.
      - выбираем задачи от начала времен и до даты Сегодня.
      - сортируем их по дате.
      - отбираем из них N задач близких к дате Сегодня
        - то есть, последние N задач.
      - выводим в список задач Сегодня.
    - 2. выводим запись-разделитель Сегодня. Чтобы пользователь видел границу между сегодня и завтра.
    - 3. показываем N задач после даты Сегодня.
      - выбираем задачи от даты Сегодня и до конца времен.
      - сортируем их по дате.
      - отбираем из них N задач близких к дате Сегодня
        - то есть, первые N задач.
      - выводим в список задач Сегодня
  - Вариант окна Б: показываем задачи за N дней 
    - 1. показываем задачи за N суток до даты Сегодня.
      - вычисляем дату начала окна как дата Сегодня - N суток.
      - выбираем задачи от начала окна и до даты Сегодня.
      - сортируем их по дате.
      - выводим в список задач Сегодня.
    - 2. выводим запись-разделитель Сегодня. Чтобы пользователь видел границу между сегодня и завтра.
    - 3. показываем задачи за N суток после даты Сегодня.
      - вычисляем дату окончания окна как дата Сегодня + N суток
      - выбираем задачи от даты Сегодня и до конца окна.
      - сортируем их по дате.
      - выводим в список задач Сегодня
-----------------------------------------------------------------------------------------------------

25 декабря 2022
+ сделать правую панель как TabControl
  + Вкладка Содержимое   tabPage_Content и listView_Content  - под-элементы выбранного элемента дерева элементов.
  + Вкладка Поиск    tabPage_Search и listView_Search        - поиск элементов и результаты поиска.
  + Вкладка Сегодня  tabPage_Today и listView_Today          - окно Сегодня.
  + Вкладка Корзина  tabPage_Trashcan                        - содержимое Корзины
+ Перенес весь выбор цветов и шрифтов в статический класс Tasks.Forms.ElementColorsAndFonts
  - теперь шрифты статические, но некрасивые. Раньше они брались из дерева, теперь они системные.
    Системно неудобные. Надо поменять шрифты?
    - теперь все шрифты и цвета для надписей элементов в одном месте размещены.
- Запланировать окно для записи тодо-списка задач, делать отдельным диалогом, там много сложностей.
- Запланировать работы по наполнению вкладки Поиск контролами и по реализации поиска в Хранилище. 
+ Создать класс Tasks.Forms.ListViewManager для управления контролом ListView.
  - ожидается, что будет базовый класс и подклассы (три объекта подклассов существуют одновременно, но показывается только один)
+ Создать класс MainFormManager, 
- Внести в него все участвующие в форме объекты: Движок, саму форму, итп. 
- Перенести в FormManager все функции, которые для формы не необходимы.
  Чтобы в форме остались только обработчики и оптимально низкоуровневые функции.
- Перенести все функции LeftPanelAction_, намеченные, 20шт.
  - пометить их тодо и исключениями?
- Поставить задачи на создание всех карточек элементов.
- убраться в проекте формы, почистить тодо - это долго. 

26 декабря 2022
+ проверить правильность размещения вызовов функций LeftPanelAction в обработчиках событий дерева.
+ создать 4 пустых формы карточек элементов и пустую форму свойств Корзины.
- надо запоминать размер и позицию каждой такой формы в настройках приложения.

